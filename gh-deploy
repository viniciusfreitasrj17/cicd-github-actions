#!/usr/bin/env bash

##############################################################################################
## Variables Global
ok="\033[32;1m[OK]\033[m"
warn="\033[33;1m[WARN]\033[m"
error="\033[31;1m[Error]\033[m"
pattern_prd="origin/main|origin/master"
pattern_hml="origin/staging|origin/homolog|origin/preview"
yellow="\033[33;1m"
cyan="\033[36;1m"
close_color="\033[m"
latest_version="$(echo $(gh api -H 'Accept: application/vnd.github+json' repos/viniciusfreitasrj17/cicd-github-actions/releases/latest)|grep 'tag_name'|awk -F 'tag_name\":\"' '{printf $NF}'|cut -d'"' -f1)"
current_version="v1.3.13" # change here

##############################################################################################
## Validators Global
[[ $(type -P git) ]] || { echo -e "$error No have git instaled\nRun to install: '${yellow}sudo apt install git -y${close_color}'"; exit 1 ;}
[[ $(type -P gh) ]] || { echo -e "$error No have gh instaled\nRun to install: '${yellow}sudo apt install gh -y${close_color}'"; exit 1 ;}
[[ $latest_version = $current_version ]] || { echo -e "$warn Have a new version | current: $cyan$current_version$close_color > latest: $cyan$latest_version$close_color\nRun to update: '${yellow}sudo curl -fsSL https://raw.githubusercontent.com/viniciusfreitasrj17/cicd-github-actions/main/installer | bash${close_color}'\n" ;}

## Debug Validators 
# echo -e "$ok pass validators ..."
# exit 0

##############################################################################################
## Utils
function _get_current_branch() {
    local current_branch=$(git branch --show-current)

    for i in "master" "main" "staging" "homolog" "preview" "develop"; do
        [[ $current_branch = $i ]] && { echo -e "$error Branch current $current_branch not permission to create Release"; exit 1 ;}
    done

    echo $current_branch
    exit 0
}

function _is_mergeable() {
    local owner="$(git remote -v | grep fetch | awk '{print $2}' | sed 's/\(git@.*:\)\|\(https\|http\):\/\/\w*\.\w*\///' | cut -d '/' -f 1)"
    local repo_name="$(git remote -v | grep fetch | rev | cut -d '.' -f 2 | cut -d '/' -f 1 | rev)"
    local pr_list=$(gh pr list)
    local current_branch=$(git branch --show-current)
    if [[ $(grep "$current_branch" <<< "$pr_list") ]]; then
        local pr_line=$(grep "$current_branch" <<< "$pr_list")
        local pr_id=$(awk '{print $1}' <<< "$pr_line")
        local pr_data=$(gh api -H "Accept: application/vnd.github+json" repos/$owner/$repo_name/pulls/$pr_id)
        local mergeable_row=$(grep "mergeable" <<< "$pr_data")
        local mergeable_string=$(echo "$mergeable_row" | awk -F 'mergeable":' '{printf $NF}')
        local is_mergeable=$(echo "$mergeable_string" | cut -d',' -f 1)
        echo $is_mergeable
        exit 0
    fi
}

##############################################################################################
## Release
function _release() {
    ## Variables
    prd_branch=$(git branch --remote | grep -E "^.\s+(${pattern_prd})$" | cut -d '/' -f 2 | wc -l)
    hml_branch=$(git branch --remote | grep -E "^.\s+(${pattern_hml})$" | cut -d '/' -f 2 | wc -l)
    re="^[0-9]+\.[0-9]+\.[0-9]+$"
    release_version=$1
    release_description=$2
    description_pr=$3
    current_branch=$(_get_current_branch) || { echo -e $current_branch; exit 1 ;} # trycatch

    ## Validators
    [[ "$prd_branch" = 1 ]] || { echo -e "$error I not know what's production branch, set in pattern_prd variable"; exit 1 ;}
    [[ "$release_version" ]] || { echo -e "$error Type the release version"; exit 1 ;}
    [[ "$release_version" =~ $re ]] || { echo -e "$error The release branch name should be in pattern 1.0.0"; exit 1 ;}
    for i in $(gh release list --exclude-drafts --exclude-pre-releases -L 100 | awk '{print $1}' | sed s/v//g); do 
        [[ $i = $release_version ]] && { echo -e "$error This release version already exists"; exit 1 ;}
    done
    [[ "$release_description" ]] || { echo -e "$error Type the release description"; exit 1 ;}

    ## Core
    prd_branch=$(git branch --remote | grep -E "^.\s+(${pattern_prd})$" | cut -d '/' -f 2 | sed "s/ //g")
    hml_branch=$(git branch --remote | grep -E "^.\s+(${pattern_hml})$" | cut -d '/' -f 2 | sed "s/ //g")

    echo -e "\n${cyan}#---> Verify if was merged on homolog/staging branch <---#${close_color}"
    sleep 2
    baseRefName=$(gh pr view --json baseRefName -q ".baseRefName==\"${hml_branch}\"")
    [[ "$baseRefName" = "true" ]] || { echo -e "$error First do you must merge in homolog/staging branch"; exit 1 ;}
    MERGED=$(gh pr view --json state -q '.state=="MERGED"')
    [[ "$MERGED" = "true" ]] || { echo -e "$error First do you must merge in homolog/staging branch"; exit 1 ;}

    echo -e "\n${cyan}#---> Creating and Push Release Branch <---#${close_color}"
    sleep 2
    git checkout -b $release_version
    git push origin $release_version

    echo -e "\n${cyan}#---> Delete Feature Branch <---#${close_color}"
    sleep 2
    git branch -D $current_branch
    git push origin --delete $current_branch

    echo -e "\n${cyan}#---> Create Release <---#${close_color}"
    sleep 2
    gh release create "v$release_version" --notes "$release_description" --target $release_version --title "v$release_version"

    echo -e "\n${cyan}#---> Create PR to Develop and merge it <---#${close_color}"
    sleep 2
    gh pr create --head $release_version --base develop --title "$release_description" --body "$description_pr"
    MERGEABLE=$(_is_mergeable)
    [[ "$MERGEABLE" = "true" ]] || { echo -e "$error No possible make merge to develop"; exit 1 ;}
    echo -e "\n$ok ${cyan}No has conflicts!${close_color}"
    gh pr merge --merge

    echo -e "\n${cyan}#---> Create PR to Master and merge it <---#${close_color}"
    sleep 2
    gh pr create --head $release_version --base $prd_branch --title "$release_description" --body "$description_pr"
    MERGEABLE=$(_is_mergeable)
    [[ "$MERGEABLE" = "true" ]] || { echo -e "$error No possible make merge to $prd_branch"; exit 1 ;}
    echo -e "\n$ok ${cyan}No has conflicts!${close_color}"
    gh pr merge --merge --delete-branch
    git checkout develop
    git pull origin develop

    sleep 1
    [[ "$?" -eq "0" ]] || { echo -e "\n$error Some error happen"; exit 1 ;}
    echo -e "\n$ok ${cyan}FINISH DEPLOY TO MASTER WITH RELEASE PUBLISHED${close_color}"

    sleep 2
    pipeline_id=$(gh run list | grep "$prd_branch" | grep "$release_version" -m 1 | rev | awk '{print $3}' | rev)
    [[ ! $pipeline_id = "" ]] && { gh run watch $pipeline_id ;}
}

##############################################################################################
## Pull Request
function _pull_request() {
    ## Variables
    hml_branch=$(git branch --remote | grep -E "*(${pattern_hml})$" | cut -d '/' -f 2 | wc -l)
    title_pr=$1
    description_pr=$2
    current_branch=$(_get_current_branch) || { echo -e $current_branch; exit 1 ;} # trycatch

    ## Validators
    [[ "$hml_branch" = 1 ]] || { echo -e "$error I not know what's homologation branch, set in pattern_hml variable"; exit 1 ;}
    [[ "$(git remote -v)" = "" ]] && { echo -e "$error Not found remote repository"; exit 1 ;}

    ## Core
    hml_branch=$(git branch --remote | grep -E "*(staging|homolog|preview)$" | cut -d '/' -f 2 | sed "s/ //g")

    echo -e "\n${cyan}#---> Push Current Branch <---#${close_color}"
    sleep 2
    git push origin $current_branch

    echo -e "\n${cyan}#---> Create PR to Homolog and merge it <---#${close_color}"
    sleep 2
    gh pr create --head $current_branch --base $hml_branch --title "$title_pr" --body "$description_pr"
    MERGEABLE=$(_is_mergeable)
    [[ "$MERGEABLE" = "true" ]] || { echo -e "$error No possible make merge to $hml_branch"; exit 1 ;}
    echo -e "\n$ok ${cyan}No has conflicts!${close_color}"
    gh pr merge --merge

    sleep 1
    [[ "$?" -eq "0" ]] || { echo -e "\n$error Some error happen"; exit 1 ;}
    echo -e "\n$ok ${cyan}FINISH DEPLOY TO HOMOLOG${close_color}"

    sleep 2
    pipeline_id=$(gh run list | grep "$hml_branch" | grep "$current_branch" -m 1 | rev | awk '{print $3}' | rev)
    [[ ! $pipeline_id = "" ]] && { gh run watch $pipeline_id ;}
}

##############################################################################################
## Help
function _help() {
  echo \
    "NAME
    gh-deploy - Github CLI to make pull request to staging/homolog, make releases and deploy to develop/master

SYNOPSIS
	gh-deploy OPTIONS

OPTIONS:
    -h, --help

        This Help


    -pr, --pull-request <title_pr> [<description_pr>]

        Make a PR in homologation environment

            Exmple <title_pr>: 'my title of pr to staging/homolog'
            Exmple <description_pr>: 'my description ofpr to staging/homolog' (optional)


    -r, -release <release_version> <release_description> [<description_pr>]

        Make Release and Deploy to production environment

            Exmple <release_version>: '1.0.1'
            Exmple <release_description>: 'my release description'
            Exmple <description_pr>: 'my pr to staging/homolog' (optional)"
    exit 0
}

##############################################################################################
## Core
case $1 in
	-h|--help)          shift; _help "$@" ;;
	-r|--release)       shift; _release "$@" ;;
	-pr|--pull-request) shift; _pull_request "$@" ;;
    -v|--version)       shift; echo "gh-deploy $current_version" ;;
    *)                  shift; echo "Invalid option, use option -h, --help to show help."
esac

##############################################################################################
